/** * Created by liangxu on 2017/11/16. */const LoginService = require('../../controller/service/login');const APIError = require('../../util/rest').APIError;const QiniuSDK = require("../../controller/sdk/qiniuCloud");const COS = require('cos-nodejs-sdk-v5');const client = require('qos-node-client');const crypto = require('crypto');var qcloud_cos = require('qcloud_cos');// let appid = '1253210153';   //1253210153// let secret_id = 'AKIDWFuO36Y9GGMU5tkWGuNDKPVZwInNrhIq';// let secret_key = 'iOEvW0KTdeYRH6mGxhN7lLsIazQC4lHh';let appid = '10061631';let secret_id = 'AKIDyOodfIcmxmSMhgS7CeoZmD5kNXap9ylw';let secret_key = '2AxtftpiiyY2hLJjghJjhi243wFZcNme';let EXPIRED_SECONDS = 100; //过期时间let tencentyun = require('tencentyun');const qos = require('qos-node-client').default;module.exports = function(router){    router            //移动端注册            .post('/api/mobile/user/regist', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.regist(ctx);                    console.log("=====mobile==result===regist=======",result);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/mobile/user/login', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.login(ctx);                    console.log("=====mobile==result===login=======",result);                    if(!result){                        throw new APIError(1004)                    }                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/mobile/shop/addsetinfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopsetupService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .get('/api/mobile/shop/getsetinfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.getShopSetupInfoService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/updateshopsetup', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopsetupService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/addshopcertifyInfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopcertifyService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .get('/api/getshopcertifyInfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.getShopCertifyInfoService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/updateshopcertifyInfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopsetupService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .get('/api/getqiniutoken', async(ctx) => {                const qiniuSDK = new QiniuSDK();                try{                    const result = await qiniuSDK.getToken(ctx);                    ctx.rest({token: result});                }catch(e){                    throw (e)                }            })};