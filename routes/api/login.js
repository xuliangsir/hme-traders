/** * Created by liangxu on 2017/11/16. */const LoginService = require('../../controller/service/login');const APIError = require('../../util/rest').APIError;const QiniuSDK = require("../../controller/sdk/qiniuCloud");const COS = require('cos-nodejs-sdk-v5');const client = require('qos-node-client');const crypto = require('crypto');var qcloud_cos = require('qcloud_cos');// let appid = '1253210153';   //1253210153// let secret_id = 'AKIDWFuO36Y9GGMU5tkWGuNDKPVZwInNrhIq';// let secret_key = 'iOEvW0KTdeYRH6mGxhN7lLsIazQC4lHh';let appid = '10061631';let secret_id = 'AKIDyOodfIcmxmSMhgS7CeoZmD5kNXap9ylw';let secret_key = '2AxtftpiiyY2hLJjghJjhi243wFZcNme';let EXPIRED_SECONDS = 100; //过期时间let tencentyun = require('tencentyun');const qos = require('qos-node-client').default;module.exports = function(router){    router            .get('/api/getsign', async(ctx) => {                const loginService = new LoginService();                try{                    let appid = '10061631';                    let secret_id = 'AKIDyOodfIcmxmSMhgS7CeoZmD5kNXap9ylw';                    let secret_key = '2AxtftpiiyY2hLJjghJjhi243wFZcNme';                    let bucket = 'home';                    qcloud_cos.conf.setAppInfo(appid, secret_id, secret_key);                    var expired = parseInt(Date.now() / 1000) + EXPIRED_SECONDS;                    var sign = qcloud_cos.auth.signMore(bucket, expired);                    console.log("getSignMore sign==",sign);                    ctx.rest({sign:sign});                }catch(e){                    console.log("getVerifyCode====eee==",e);                    throw new APIError(e);                }            })            .get('/api/getnewsign', async(ctx) => {                const loginService = new LoginService();                try{                    var bucket = 'home';                    var appid = '1253210153';   //1253210153                    var secret_id = 'AKIDWFuO36Y9GGMU5tkWGuNDKPVZwInNrhIq';                    var secret_key = 'iOEvW0KTdeYRH6mGxhN7lLsIazQC4lHh';                    tencentyun.conf.setAppInfo(appid, secret_id, secret_key, bucket);                    // var expired = parseInt(Date.now() / 1000) + EXPIRED_SECONDS;                    // var sign = tencentyun.auth.signMore(bucket, expired);                    // console.log("--------getSignMore sign==------",sign);                    var cos = new COS(appid, secret_id, secret_key);                    var tenxun_cos = {                        Bucket: 'home',                        Region: 'tj'                    }                    const client = qos.createClient({appid, secret_id, secret_key, bucket});                    var SecretId = opt.SecretId;                    var SecretKey = opt.SecretKey;                    var method = (opt.method || 'get').toLowerCase();                    var pathname = opt.pathname || '/';                    var queryParams = opt.params || '';                    var headers = opt.headers || '';                    pathname.indexOf('/') !== 0 && (pathname = '/' + pathname);                    if (!SecretId) return console.error('lack of param SecretId');                    if (!SecretKey) return console.error('lack of param SecretKey');                    var getObjectKeys = function (obj) {                        var list = [];                        for (var key in obj) {                            if (obj.hasOwnProperty(key)) {                                list.push(key);                            }                        }                        return list.sort();                    };                    function camSafeUrlEncode(str) {                        return encodeURIComponent(str)                                .replace(/!/g, '%21')                                .replace(/'/g, '%27')                                .replace(/\(/g, '%28')                                .replace(/\)/g, '%29')                                .replace(/\*/g, '%2A');                    }                    var obj2str = function (obj) {                        var i, key, val;                        var list = [];                        var keyList = getObjectKeys(obj);                        for (i = 0; i < keyList.length; i++) {                            key = keyList[i];                            val = obj[key] || '';                            key = key.toLowerCase();                            list.push(camSafeUrlEncode(key) + '=' + camSafeUrlEncode(val));                        }                        return list.join('&');                    };                    // 签名有效起止时间                    var now = parseInt(new Date().getTime() / 1000) - 1;                    var expired = now;                    if (opt.expires === undefined) {                        expired += 3600; // 签名过期时间为当前 + 3600s                    } else {                        expired += (opt.expires * 1) || 0;                    }                    // 要用到的 Authorization 参数列表                    var qSignAlgorithm = 'sha1';                    var qAk = SecretId;                    var qSignTime = now + ';' + expired;                    var qKeyTime = now + ';' + expired;                    var qHeaderList = getObjectKeys(headers).join(';').toLowerCase();                    var qUrlParamList = getObjectKeys(queryParams).join(';').toLowerCase();                    // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778                    // 步骤一：计算 SignKey                    var signKey = crypto.createHmac('sha1', SecretKey).update(qKeyTime).digest('hex');                    // 步骤二：构成 FormatString                    var formatString = [method, pathname, obj2str(queryParams), obj2str(headers), ''].join('\n');                    formatString = new Buffer(formatString, 'utf8');                    // 步骤三：计算 StringToSign                    var sha1Algo = crypto.createHash('sha1');                    sha1Algo.update(formatString);                    var res = sha1Algo.digest('hex');                    var stringToSign = ['sha1', qSignTime, res, ''].join('\n');                    // 步骤四：计算 Signature                    var qSignature = crypto.createHmac('sha1', signKey).update(stringToSign).digest('hex');                    // 步骤五：构造 Authorization                    var authorization = [                        'q-sign-algorithm=' + qSignAlgorithm,                        'q-ak=' + qAk,                        'q-sign-time=' + qSignTime,                        'q-key-time=' + qKeyTime,                        'q-header-list=' + qHeaderList,                        'q-url-param-list=' + qUrlParamList,                        'q-signature=' + qSignature                    ].join('&');                    console.log("-=====authorization----authorization====eee==",authorization);                    return authorization;                    // var expired = parseInt(Date.now() / 1000) + 6000;                    // var sign1 = tencentyun.auth.appSignV2('http://web.image.myqcloud.com/photos/v1/1253210153/0/', expired);                    // console.log(sign1);                    //                    // var sign2 = tencentyun.auth.appSignV2('http://web.image.myqcloud.com/photos/v1/1253210153/0/', expired);                    // console.log(sign2);                    //ctx.rest({sign1:sign1,sign2:sign2 });                }catch(e){                    console.log("-=====tencentyun----getsign====eee==",e);                    throw new APIError(e);                }            })            .get('/api/getVerifyCode', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.getVerifyCode(ctx);                    console.log("result000==========",result);                    if(!result){                        throw new APIError(1005)                    }                    ctx.rest(result);                }catch(e){                    console.log("getVerifyCode====eee==",e);                    throw new APIError(e);                }            })            .post('/api/regist', async(ctx) => {                console.log("------regist---======");                const loginService = new LoginService();               try{                   const result = await loginService.regist(ctx);                   console.log("result===regist=======",result);                   ctx.rest(result);               }catch(e){                   throw (e)               }            })            .post('/api/login', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.login(ctx);                    console.log("=======result===login=======",result);                    if(!result){                        throw new APIError(1004)                    }                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/setuppwd', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.setupPwd(ctx);                    console.log("result===setuppwd=======",result);                    ctx.rest({result: result});                }catch(e){                    throw (e)                }            })            .post('/api/resetuppwd', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.reSetupPwd(ctx);                    console.log("/api/resetuppwd22222=======",result);                    ctx.rest({result: result});                }catch(e){                    throw (e)                }            })            .post('/api/addshopsetupinfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopsetupService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .get('/api/getshopsetupinfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.getShopSetupInfoService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/updateshopsetup', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopsetupService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/addshopcertifyInfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopcertifyService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .get('/api/getshopcertifyInfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.getShopCertifyInfoService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .post('/api/updateshopcertifyInfo', async(ctx) => {                const loginService = new LoginService();                try{                    const result = await loginService.addShopsetupService(ctx);                    ctx.rest(result);                }catch(e){                    throw (e)                }            })            .get('/api/getqiniutoken', async(ctx) => {                const qiniuSDK = new QiniuSDK();                try{                    const result = await qiniuSDK.getToken(ctx);                    ctx.rest({token: result});                }catch(e){                    throw (e)                }            })};