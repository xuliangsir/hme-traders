/** * Created by liangxu on 2017/11/30. */let _ = require('lodash');let errorCode = require('../../config/errorCode');let pg = require('../../util/DB_Base');let knex = require('../../util/knex');let util = require('../../util/util');class ShopDao{    async addServiceDao(params){        try{            return await knex("shop_service").insert(params)        }catch(e){            console.log("======addServiceDao===e==", e);            throw e;        }    }    async getShopServiceDao(shopid){        console.log("====getShopServiceDao====shopid=====",shopid);        try{            return await knex("shop_service").column(                    "shop_service.id as serviceid",                    "shop_service.uuid as uuid",                    "shop_service.shopid ",                    "shop_service.serviceimgurl",                    "shop_service.name",                    "shop_service.description",                    "shop_service.price",                    "shop_service.unit",                    "shop_service.originalprice",                    "shop_service.minbuycount",                    "shop_service.servicetimes",                    "shop_service.platformkind",                    "shop_service.subplatformkind",                    "shop_service.shopkind",                    "shop_service.city",                    "shop_service.sortno as sortNo",                    "shop_service.isonline"            ).select().where({shopid:shopid})        }catch(e){            console.log("======addServiceDao===e==", e);            throw e;        }    }    async updateShopServiceDao(params){        try{            return await knex("shop_service").update({                    serviceimgurl: params.serviceimgurl,                    name:params.name,                    description:params.name,                    price:params.price,                    unit: params.unit,                    originalprice:params.originalprice,                    minbuycount:params.minbuycount,                    servicetimes:params.servicetimes,                    platformkind:params.platformkind,                    subplatformkind:params.subplatformkind,                    shopkind:params.shopkind,                    city:params.city,                    sortno:params.sortno,                    isonline:params.isonline        }).where({id:serviceid, shopid:params.shopid}).select();        }catch(e){            console.log("======addServiceDao===e==", e);            throw e;        }    }    async addShopServiceKindDao(params){        try{            return await knex("shop_servicekind").insert(params)        }catch(e){            console.log("======addShopServiceKindDao===e==", e);            throw e;        }    }    async addPlatformKindDaoCopy(params){        try{            return await knex("platform_kind").insert(params)        }catch(e){            console.log("======addPlatformKindDao===e==", e);            throw e;        }    }    async getShopServicekindDao(shopid){        try{            return await knex("shop_servicekind").column(                    "shop_servicekind.id as kindid",                    "shop_servicekind.uuid ",                    "shop_servicekind.shopid",                    "shop_servicekind.sortno",                    "shop_servicekind.servicekind"            ).select().where({shopid:shopid})        }catch(e){            console.log("======getShopServicekindDao===e==", e);            throw e;        }    }    async updateShopServicekindDao(params){        try{            return await knex("shop_servicekind").update({                sortno :params.sortno,                servicekind:params.servicekind            }).select().where({shopid:shopid, servicekind: params.kindid})        }catch(e){            console.log("======updateShopServicekindDao===e==", e);            throw e;        }    }    async getShopServicekindDaoCOPY(shopid){        try{            return await knex("shop_service").column(                    "shop_service.id as serviceid",                    "shop_service.shopid ",                    "shop_service.name",                    "shop_service.description",                    "shop_service.price",                    "shop_service.originalprice",                    "shop_service.minbuycount",                    "shop_service.servicetimes",                    "shop_service.platformkind",                    "shop_service.shopkind",                    "shop_service.city",                    "shop_service.sortNo",                    "shop_service.isonline"            ).select().where({id:serviceid})        }catch(e){            console.log("======addServiceDao===e==", e);            throw e;        }    }    async getPlatformServiceKindDao(){        console.log("====getPlatformServiceKindDao====shopid=====");        try{            return await knex("platform_servicekind").column(                    "platform_servicekind.id as kindid",                    "platform_servicekind.name as kindname",                    "platform_servicekind.imgurl",                    "platform_servicekind.type",                    "platform_servicekind.isonline"            ).select()        }catch(e){            console.log("======getPlatformServiceKindDao===e==", e);            throw e;        }    }    async getPlatformSubServiceKindDao(){        console.log("====getPlatformSubServiceKindDao====shopid=====");        try{            return await knex("sub_servicekind").column(                    "sub_servicekind.id as kindid",                    "sub_servicekind.name as kindname",                    "sub_servicekind.imgurl",                    "sub_servicekind.subtype",                    "sub_servicekind.maintype"            ).select()        }catch(e){            console.log("======getPlatformSubServiceKindDao===e==", e);            throw e;        }    }}module.exports= ShopDao;